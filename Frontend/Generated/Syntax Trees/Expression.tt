<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
/*
 * This is an automatically generated file. Any changes made will be lost upon regeneration.
*/

using System.Diagnostics;

namespace Frontend.Expressions
{
<#			var Doc = new XmlDocument();
            Doc.Load(@"C:\Users\Administrative\Source\Repos\LoxStar\Frontend\Generated\Syntax Trees\SyntaxTrees.xml");
            var Classes = new List<string>();
            var Properties = new List<(string, string, string)>();   // Class, Property, Type
            foreach (XmlNode N in Doc.ChildNodes[1].ChildNodes)
            {
                Classes.Add(N.Name);
                foreach (XmlNode Prop in N.ChildNodes)
                    Properties.Add((N.Name, Prop.InnerText, Prop.Name));
            }#>
	public interface IExpressionVisitor<T>
	{
<#			foreach (var C in Classes)
			{ if (C == "Expression") continue;#>
		T Visit<#=C#>(<#=C#> <#=C[0].ToString().ToLower()+C.Substring(1)#>);
<#}#>
	}
<#			foreach (var C in Classes)
            {
			var Props = Properties.Where(x => x.Item1 == C).ToArray();#>

	public <#= C == "Expression" ? "abstract " : ""#>class <#=C#><#= C != "Expression" ? " : Expression" : ""#>
    {
<#foreach (var Prop in Properties.Where(x => x.Item1 == C)) {#>
		public <#=Prop.Item3#> <#=Prop.Item2#> { get; }

<#} if (C == "Expression") goto skipctor;#>
		[DebuggerStepThrough]
		public <#=C#>(<# for(int i=0;i<Props.Length;i++){#><#=Props[i].Item3#> <#=Props[i].Item2[0].ToString().ToLower()+Props[i].Item2.Substring(1)#><#=i == Props.Length - 1 ? "" : ", " #><#}#>)
		{
<#for(int i=0;i<Props.Length;i++){#>
			<#=Props[i].Item2#> = <#=Props[i].Item2[0].ToString().ToLower()+Props[i].Item2.Substring(1)#>;
<#}#>
		}

<#skipctor:#>
		public <#=C == "Expression" ? "abstract" : "override"#> T Accept<T>(IExpressionVisitor<T> visitor)<#=C == "Expression" ? ";" : $" => visitor.Visit{C}(this);"#>
	}
<#}#>
}